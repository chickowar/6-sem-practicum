version: '3.8'

services:
  #----------------------------------------------------------------------------------------#
  # KAFKA
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - internal

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"     # для контейнеров
      - "29092:29092"   # для локалки
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - internal

  kafka-init:
    image: bitnami/kafka:3.6
    depends_on:
      - kafka
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      sleep 17;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic orchestrator_commands --partitions 1 --replication-factor 1;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic runner_commands --partitions 1 --replication-factor 1;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic heartbeat --partitions 1 --replication-factor 1;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic scenario_events --partitions 1 --replication-factor 1;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic frames --partitions 1 --replication-factor 1;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic predictions --partitions 1 --replication-factor 1;
      "
    networks:
      - internal

  #----------------------------------------------------------------------------------------#
  # SCENARIOS DB
  scenarios-db:
    image: postgres:15
    container_name: scenarios-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: scenarios
    ports:
      - "5432:5432"
    volumes:
      - scenarios_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  scenarios-init:
    image: postgres:15
    depends_on:
      scenarios-db:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      sleep 5;
      psql -h scenarios-db -U postgres -d scenarios -c \"
        CREATE TABLE IF NOT EXISTS scenarios (
          scenario_id UUID PRIMARY KEY,
          video_path TEXT NOT NULL,
          status TEXT NOT NULL
        );
      \"
      "
    environment:
      PGPASSWORD: mysecretpassword
    networks:
      - internal


  #----------------------------------------------------------------------------------------#
  # PREDICTIONS DB
  predictions-db:
    image: postgres:15
    container_name: predictions-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: predictions
    ports:
      - "5433:5432"
    volumes:
      - predictions_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  predictions-init:
    image: postgres:15
    depends_on:
      predictions-db:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      sleep 5;
      psql -h predictions-db -U postgres -d predictions -c \"
        CREATE TABLE IF NOT EXISTS predictions (
          scenario_id UUID NOT NULL,
          frame_number INTEGER NOT NULL,
          predictions JSONB NOT NULL,
          PRIMARY KEY (scenario_id, frame_number)
        );
        CREATE INDEX IF NOT EXISTS idx_predictions_scenario ON predictions(scenario_id);
      \"
      "
    environment:
      PGPASSWORD: mysecretpassword
    networks:
      - internal


  # RUNNERS
  runner-1:
    build:
      context: .
      dockerfile: Dockerfile.runner
    container_name: runner-1
    environment:
      - RUNNER_ID=runner-1
    depends_on:
      - kafka
    networks:
      - internal

  runner-2:
    build:
      context: .
      dockerfile: Dockerfile.runner
    container_name: runner-2
    environment:
      - RUNNER_ID=runner-2
    depends_on:
      - kafka
    networks:
      - internal

  runner-3:
    build:
      context: .
      dockerfile: Dockerfile.runner
    container_name: runner-3
    environment:
      - RUNNER_ID=runner-3
    depends_on:
      - kafka
    networks:
      - internal


volumes:
  scenarios_pgdata:
  predictions_pgdata:

networks:
  internal:
    name: internal
    driver: bridge